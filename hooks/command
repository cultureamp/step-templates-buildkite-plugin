#!/usr/bin/env bash
set -ueo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=../lib/shared.bash
. "$DIR/../lib/shared.bash"
# shellcheck source=../lib/steps.bash
. "$DIR/../lib/steps.bash"

step_template="$(plugin_read_config "STEP_TEMPLATE")"
selector_template="$(plugin_read_config "SELECTOR_TEMPLATE")"
step_var_names="$(plugin_read_list "STEP_VAR_NAMES")"
auto_selections="$(plugin_read_list "AUTO_SELECTIONS")"

if [[ -z "${step_template}" ]] ; then
  1>&2 echo "+++ ❌ Step templates plugin error"
  1>&2 echo "No 'step_template' argument provided: cannot produce pipeline fragments without the template."
  exit 1
fi

if [[ -z "${BUILDKITE_JOB_ID}" ]] ; then
  1>&2 echo "+++ ⚠️ Step templates plugin warning"
  1>&2 echo "No 'BUILDKITE_JOB_ID' environment variable found: STEP_ID will be empty."
fi

if [[ -z "${selector_template}" ]]  && [[ -z "${auto_selections}" ]] ; then
  1>&2 echo "+++ ❌ Step templates plugin error"
  1>&2 echo "Neither selector-template nor auto-selections specified: nothing to do."
  exit 1
fi

# does the template exist?
if [[ ! -f "${step_template}" ]]; then
  1>&2 echo "+++ ❌ Step templates plugin error"
  1>&2 echo "Specified step template does not exist: '${step_template}'"
  exit 1
fi


# template fragments are written in reverse order: each fragment will be rendered immediately
# after the currently executing step.

# upload the selection steps template to the pipeline
if [[ -n "${selector_template}" ]]; then
  # The block step will appear last
  buildkite-agent pipeline upload "${selector_template}"
fi

# write items selected and held in metadata
key=""
if [[ -z "$key" && -f "${selector_template}" ]]; then
  key="$(extract_key_from_template "${selector_template}")"
fi

if [[ -n "${key}" ]]; then
  echo "Finding selected environments in metadata for key '${key}'"
  selected_environments="$(buildkite-agent meta-data get "${key}" --default "")"
  if [[ -n "${selected_environments}" ]]; then
    write_steps "${step_template}" "${step_var_names}" "${selected_environments}" "${BUILDKITE_JOB_ID:-}"
  fi
fi

# write auto-selections
if [[ -n "${auto_selections}" ]]; then
  (
    # Write the default branch for the pipeline into the environment just for
    # automatic steps. Allows builds to vary branch selectors on an automatic
    # build.
    export AUTO_SELECTION_DEFAULT_BRANCH="${BUILDKITE_PIPELINE_DEFAULT_BRANCH}"

    write_steps "${step_template}" "${step_var_names}" "${auto_selections}" "${BUILDKITE_JOB_ID:-}"
  )
fi
